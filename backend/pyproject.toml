[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pr-summarizer"
version = "0.1.0"
description = "AI-powered PR Summarizer with AgenticRAG capabilities"
authors = [
    {name = "Development Team"}
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi[all]>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "google-generativeai>=0.7.0",
    "PyGithub>=2.1.1",
    "jira>=3.5.0",
    "atlassian-python-api>=3.41.0",
    "google-api-python-client>=2.108.0",
    "google-auth-httplib2>=0.1.1",
    "google-auth-oauthlib>=1.1.0",
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
    "redis>=5.0.0",
    "structlog>=23.2.0",
    "python-jose[cryptography]>=3.3.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",  # For testing FastAPI
    "ruff>=0.1.6",
    "black>=23.11.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

[project.urls]
Homepage = "https://github.com/your-org/pr-summarizer"
Documentation = "https://github.com/your-org/pr-summarizer/docs"
Repository = "https://github.com/your-org/pr-summarizer"

[tool.ruff]
target-version = "py311"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.black]
target-version = ['py311']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "github.*",
    "jira.*",
    "atlassian.*",
    "google.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "contract: marks tests as contract tests",
    "us1: marks tests for User Story 1 (Basic PR Summary)",
    "us2: marks tests for User Story 2 (Multi-Source Context)",
    "us3: marks tests for User Story 3 (Advanced AI Guidance)",
    "github: marks tests for GitHub service integration",
    "jira: marks tests for Jira service integration",
    "gemini: marks tests for Gemini AI service integration",
    "performance: marks tests for performance validation",
    "error_handling: marks tests for error handling scenarios",
    "acceptance: marks tests for acceptance criteria validation",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/venv/*", "*/__pycache__/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"